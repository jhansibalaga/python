1.write a program to define a function with multiple return values
def arthmetic_operations(a,b):
    add=a+b 
    sub=a-b 
    mul=a*b 
    div=a/b
    return f"sum is:{add}\ndifference is:{sub}\nmultiplication is:{mul}\ndivision is:{div}"    
a=int(input("Enter a value:"))    
b=int(input("Enter b value:"))
print(arthmetic_operations(a,b)) 

2.write a program to define a function using default arguments
def greet(name="jhansi", message="Hello", punctuation="!"):
    return f"{message}, {name}{punctuation}"
greeting1 = greet()
greeting2 = greet("Bob", "Hi")
greeting3 = greet("Charlie", "Good morning", ".")
print(greeting1)  
print(greeting2)  
print(greeting3)

3.write a program to find the length of the string without using any library functions
string = "jhansi"
count=0
for char in string:
    count+=1 
print("length of the string:",count)   


4.write a program to check if the substring is present in the given string or not in python
def checking():
    if substring in string:
        return "substring is present"
    else:
        return "substring is not present"
string="python is a high-level language" 
substring="level"
print(checking())
        

5. for i in range(1,6):
     print(i , end=" ")
 print()    
 for i in range(5,0,-1):
     print(i, end=" ")
 print()
 for i in range(3,0,-2):
     print(i,end=" ") 


6.There are n numbers .If the number is odd it should be doubled.
  for i in range(100):
      if(i%2!=0):
          print(i+i)


7.Arrange the characters in alphabetical order in a given string . Lowercase first then upper case
  st = "anithA"
  st=sorted(st)
  lower=[]
  upper=[]
  for char in st:
      if(char.islower()):
          lower.append(char) 
      elif(char.isupper()):
          upper.append(char)
  final=''.join(lower+upper)
  print(final)
   


factorial of a given number:
a=int(input("enter number:"))
fact=1
for i in range(1,a+1):
    fact=fact*i 
print(f"factorial of {a} is {fact}")
    

     
 8.Print count a particular digit in a number.     
  a=11234587532
  digit =3 
  num = str(a)
  count=0 
  for char in num:
      if(char==str(digit)):
          count+=1
  print(count)        

  printing prime numbers
  for i in range(2,100):
      for j in range(2,100):
          if(i%j==0):
              break
      if(i==j):
          print(i)


check the number i prime or not

def check_prime():
    count=0
    for i in range(1,n+1):
        if(n%i==0):
            count+=1 
    if(count==2):
        return "it is a prime number"
    else:
        return "it is not a prime number" 
n=int(input())
print(check_prime())

output:
10
it is not a prime number


printing the prime numbers in between the range 
def check_prime(i):
    count=0
    for j in range(1,i+1):
        if(i%j==0):
            count+=1 
    if(count==2):
        return True
    else:
        return False 
n=int(input())
for i in range(2,n+1):
    if(check_prime(i)):
        print(i, end=" ")
output:
10
2 3 5 7


n=int(input())
for i in range(1,n+1):
    for j in range(1,n+1):
        print("*",end=" ")
    print()  

output:
4
* * * * 
* * * * 
* * * * 
* * * * 


n=int(input())
for i in range(1,n+1): # indicates no.of rows
    for j in range(1,i+1): #indicates no.of columns
        print("*",end=" ")
    print()    

output:
4
* 
* * 
* * * 
* * * * 


n=int(input())
for i in range(1,n+1): # indicates no.of rows
    for j in range(1,i+1): #indicates no.of columns
        print(i,end=" ")
    print()    

output:
4
1 
2 2 
3 3 3 
4 4 4 4 


n=int(input())
for i in range(1,n+1): # indicates no.of rows
    for j in range(1,i+1): #indicates no.of columns
        print(j,end=" ")
    print()    

output :
4
1 
1 2 
1 2 3 
1 2 3 4 



n=int(input())
for i in range(1,n+1): 
    for j in range(n-i): # indicates no.of spaces
        print(" ",end=" ")
    for j in range(2*i-1): 
        print("*",end=" ")
    print()    
    
output :
4
      * 
    * * * 
  * * * * * 
* * * * * * * 
 

n=int(input())
for i in range(1,n+1): 
    for j in range(n-i): # indicates no.of spaces
        print(" ",end=" ")
    for j in range(i): 
        print("*",end=" ")
    print()    
    
output :
4
      * 
    * * 
  * * * 
* * * * 


n=int(input())
for i in range(1,n+1): 
    for j in range(n-i+1): # indicates no.of spaces
        print(" ",end=" ")
    for j in range(i): 
        print("*",end=" ")
    print()   

output:
4
        * * * * 
      * * * * 
    * * * * 
  * * * * 


n=int(input())
for i in range(1,n+1): 
    for j in range(n-i+1): 
        print("*",end=" ")
    print()  

output:
4
* * * * 
* * * 
* * 
* 


n=int(input())
for i in range(1,n+1): 
    for j in range(i-1): # indicates no.of spaces
        print(" ",end=" ")
    for j in range(n-i+1): 
        print("*",end=" ")
    print()    
    
output :
4
* * * * 
  * * * 
    * * 
      * 
  

n=int(input())
for i in range(n):
    for j in range(n):
        if(i==0 or i==n-1 or j==0 or j==n-1):
            print("*",end=" ")
        else:
            print(" ",end=" ")
    print()    

output :
4
* * * * 
*     * 
*     * 
* * * * 
    

n=int(input())
for i in range(n):
    for j in range(i+1):
        if(i==n-1 or j==0 or j==n-1 or i==j):
            print("*",end=" ")
        else:
            print(" ",end=" ")
    print()    

output :
6
* 
* * 
*   * 
*     * 
*       * 
* * * * * * 

    

    
    
9.  k='k' 
  for i in range(5):
      print(k,end="")
  print()
  l='l'
  for i in range(4):
      print(l,end="")
  print()
  m='m'
  for i in range(3):
      print(m,end="")
  print()
  n='n'
  for i in range(2):
     print(n,end="")
  print()
  o='0'
  for i in range(1):
      print(o,end="")



10.def cal(a,b):
    res={
        'add':a+b,
         'sub':a-b,
         'mul':a*b,
         'mod':a%b,
         'div':a/b
    }
    return res
a=5
b=6
print(cal(a,b))



11.for i in range(n):
      no_char = n-i
      spaces=' ' * i 
      print(spaces + char * no_char)
      char=chr(ord(char)+1) 
  output :
  kkkkk
   llll
    mmm
    nn
    o




12.Vohra went to a movie with his friends in a Wave theatre and during  break time he bought pizzas, puffs and cool drinks. Consider   the following prices : 
Rs.100/pizza
Rs.20/puffs
Rs.10/cooldrink
Generate a bill for What Vohra has bought.
p=10
pf=12
cd=5
print("bill details")
print("no of pizzas:",p)
print("No of puffs:",pf)
print("no of cd:",cd)
t=p*100+pf*20+cd*10
print("total price=",t)
print("ENJOY THE SHOW!!!") 


13.Problem Statement – Ritik wants a magic board, which displays a character for a corresponding number for his science project. Help him to develop such an application.
For example when the digits 65,66,67,68 are entered, the alphabet ABCD are to be displayed.
[Assume the number of inputs should be always 4 ]
d1=int(input("enter the digit 1 :"))
d2=int(input("enter the digit 2 :"))
d3=int(input("enter the digit 3 :"))
d4=int(input("enter the digit 4 :"))
print(d1,"-",chr(d1))
print(d2,"-",chr(d2))
print(d3,"-",chr(d3))
print(d4,"-",chr(d4)) 


14.Problem Statement – FOE college wants to recognize the department which has succeeded in getting the maximum number of placements for this academic year. The departments that have participated in the recruitment drive are CSE,ECE, MECH. Help the college find the department getting maximum placements. Check for all the possible output given in the sample snapshot
Note : If any input is negative, the output should be “Input is Invalid”.  If all department has equal number of placements, the output should be “None of the department has got the highest placement”.
cse=int(input("Enter the no of students placed in CSE:"))
ece=int(input("Enter the no of students placed in ECE:"))
mech=int(input("Enter the no of students placed in MECH:"))
if(cse<0 or ece<0 or mech<0):
    print("invalid input")
elif(cse==ece and ece==mech):
    print("none of the department has got the highest placement")
m=max(cse,ece,mech)
if(cse==m):
    print("Highest placement \n CSE")
if(ece==m):
    print("Highest placement \n ECE")
if(mech==m):
    print("Highest placement \n MECH") 


15.Given n number of days as input,write a program to convert n number of days into years y ,weeks w and days d
n=int(input("enter the value:"))
y=1329//365
y1=1329%365
w=y1//7
w1=y1%7
d=w1//1
print(y,"years")
print(w,"weeks")
print(d,"days")


16.Problem Statement – Rhea Pandey’s teacher has asked her to prepare well for the lesson on seasons. When her teacher tells a month, she needs to say the season corresponding to that month. Write a program to solve the above task.

Spring – March to May,
Summer – June to August,
Autumn – September to November and,
Winter – December to February.
Month should be in the range 1 to 12.  If not the output should be “Invalid month”.

m=int(input("enter the month:"))
if m==12 or m==1 or m==2:
    print("Season:Winter")
elif m==3 or m==4 or m==5:
    print("Season:Spring")
elif m==6 or m==7 or m==8:
    print("Season:Summer")
elif m==9 or m==10 or m==11:
    print("Season:Autumn")
else:
    print("Invalid month")

    
17.check palendrome or not
n=input("enter the value:")
if(n==n[::-1]):
    print("palendrome")
else:
    print("not a palendrome ")



18.XYZ Technologies is in the process of increment the salary of the employees.  This increment is done based on their salary and their performance appraisal rating.

If the appraisal rating is between 1 and 3, the increment is 10% of the salary.
If the appraisal rating is between 3.1 and 4, the increment is  25% of the salary.
If the appraisal rating is between 4.1 and 5, the increment is  30% of the salary.
Note   :   If either the salary is 0 or negative  (or) if the appraisal rating is not in the range 1 to 5 (inclusive), then the output should be “Invalid Input”.

s=int(input("enter the salary:"))
p=float(input("enter the performance appraisal rating:"))
if(p>5 or s<=0):
    print("invalid input")
elif(p>=1 and p<=3):
    salary=s*(10/100)
    print(int(salary+s))
elif(p>=3.1 and p<=4):
    salary=s*(25/100)
    print(int(salary+s))
elif(p>=4.1 and p<=5) :
    salary=s*(30/100)
    print(int(salary+s))


19.Problem Statement – Chaman planned to choose a four digit lucky number for his car. His lucky numbers are 3,5 and 7. Help him find the number, whose sum is divisible by  3 or 5 or 7. Provide a valid car number, Fails to provide a valid input then display that number is not a valid car number. 

Note : The input other than 4 digit positive number[includes negative and 0] is considered as invalid.

n=input("enter the car no:")
t_sum=0
for char in n:
    t_sum+=int(char)
if(len(n)<4):
    print(n,"is not a valid number")
elif(t_sum%3==0 or t_sum%5==0 or t_sum%7==0):
    print("lucky number")
else:
    print("sorry it's not my lucky number")




20.The function takes two integrals m and n as arguments. You are required to obtain the total of all integers ranging between 1 to n (both inclusive) which are not divisible by m. You must also return the distinction between the sum of integers not divisible by m with the sum of integers divisible by m.
Assumption
m > 0 and n > 0
Sum lies within the integral range
Example
Input:
m = 6
n = 30
Output:
285
Integers divisible by 6 are 6, 12, 18, 24, and 30. Their sum is 90.
Integers that are not divisible by 6 are 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, and 29. Their sum is 375.
The difference between them is 285 (375 – 90).
m=int(input("enter m value :"))
n=int(input("enter n value :"))
l1=[]
l2=[]
for i in range(1,n+1):
    if(i%m==0):
        l1.append(i)
    if(i%m!=0):
        l2.append(i)
t1=sum(l1)     
t2=sum(l2)
diff=t2-t1
print(diff)


21.Write a function to validate if the provided two strings are anagrams or not. If the two strings are anagrams, then return ‘yes’. Otherwise, return ‘no’.
Explanation
Listen and Silent are anagrams (an anagram is a word formed by rearranging the letters of the other word).
i1=input("enter the first string:")
i2=input("enter the second string:")
l1=[]
l2=[]
for char in i1:
    l1.append(char)
for char in i2:
    l2.append(char)
if(sorted(l1)==sorted(l2)):
    print("yes")
else:
    print("no")
output:
enter the first string:Listen
enter the second string:Silent
yes


22."split()" method is used to give the user inputs in same line with space 
eg: l,b=input().split()
    l=int(l)
    b=int(b)
    y=(l)**(b)
    print(y)


23.To print fibonacci series :
n=int(input())
n1,n2=0,1
for i in range(n):
    print(n1,end=' ')
    n1,n2=n2,n1+n2 



24.The function accepts two positive integers ‘r’ and ‘unit’ and a positive integer array ‘arr’ of size ‘n’ as its argument ‘r’ represents the number of rats present in an area, ‘unit’ is the amount of food each rat consumes and each ith element of array ‘arr’ represents the amount of food present in ‘i+1’ house number, where 0 <= i
Note:
Return -1 if the array is null
Return 0 if the total amount of food from all houses is not sufficient for all the rats.
Computed values lie within the integer range.
Example:
Input:
r: 7
unit: 2
n: 8
arr: 2 8 3 5 7 4 1 2
Output:
4
def cal(r,unit,arr,n):
    if n==0 :
        return -1
    totalfoodrequired = r * unit
    food = 0
    house = 0
    for house in range(n):
        food += arr[house]
        if food >= totalfoodrequired :
            break
    if totalfoodrequired > food :
        return 0
    return house+1       
r=int(input())
unit=int(input())
n=int(input())
arr = list(map(int,input().split()))
print(cal(r,unit,arr,n))
 


25.The Binary number system only uses two digits, 0 and 1 and number system can be called binary string. You are required to implement the following function:
int OperationsBinaryString(char* str);
The function accepts a string str as its argument. The string str consists of binary digits eparated with an alphabet as follows:
– A denotes AND operation
– B denotes OR operation
– C denotes XOR Operation
You are required to calculate the result of the string str, scanning the string to right taking one opearation at a time, and return the same.
Note:
No order of priorities of operations is required
Length of str is odd
If str is NULL or None (in case of Python), return -1
Input:
str: 1C0C1C1A0B1
Output:
1
def OperationsBinaryString(string):
    if string==0 :
        return -1
    a=int(string[0])   
    for i in range(1,len(string),2):                    
        if string[i]== 'A':
            a &= int(string[i+1])
        elif string[i] == 'B':
            a |= int(string[i+1])
        elif string[i]== 'C':
            a^=int(string[i+1])
    return a 
string=input()      
print(OperationsBinaryString(string))



26.You are given a function.
int CheckPassword(char str[], int n);
The function accepts string str of size n as an argument. Implement the function which returns 1 if given string str is valid password else 0.
str is a valid password if it satisfies the below conditions.
– At least 4 characters
– At least one numeric digit
– At Least one Capital Letter
– Must not have space or slash (/)
– Starting character must not be a number
Assumption:
Input string will not be empty.
Example:
Input 1:
aA1_67
Output 1:
1
def checkpassword(s,n):
    if n<4 :
        return 0
    if s[0].isdigit():
        return 0
    cap=0
    num=0
    for i in range(n):
        if s[i]==' ' or  s[i]=='/':
            return 0
        elif s[i]>='A' and s[i]<='Z':
            cap+=1 
        elif s[i].isdigit():
            num+=1 
    if cap>0 and num>0:
        return 1
    else:
        return 0
s=input()
n=len(s)
print(checkpassword(s,n))
 
27.You are given a function,
int findCount(int arr[], int length, int num, int diff);
The function accepts an integer array ‘arr’, its length and two integer variables ‘num’ and ‘diff’. Implement this function to find and return the number of elements of ‘arr’ having an absolute difference of less than or equal to ‘diff’ with ‘num’.
Note: In case there is no element in ‘arr’ whose absolute difference with ‘num’ is less than or equal to ‘diff’, return -1.
Example:
Input:
arr: 12 3 14 56 77 13
num: 13
diff: 2
Output:
3 
def abs_diff(arr,diff,num):
    count = 0
    for i in range(len(arr)):
        if abs(arr[i]-num) <= diff :
            count+=1
    return count
arr = list(map(int,input("arr:").split()))  
num =int(input("num:"))
diff=int(input("diff:"))
print(abs_diff(arr,diff,num))


28.def differenceofSum(n. m)
The function accepts two integers n, m as arguments Find the sum of all numbers in range from 1 to m(both inclusive) that are not divisible by n. Return difference between sum of integers not divisible by n with sum of numbers divisible by n.
Example
Input
n:4
m:20
Output
90
Explanation
Sum of numbers divisible by 4 are 4 + 8 + 12 + 16 + 20 = 60
Sum of numbers not divisible by 4 are 1 +2 + 3 + 5 + 6 + 7 + 9 + 10 + 11 + 13 + 14 + 15 + 17 + 18 + 19 = 150
Difference 150 – 60 = 90

def differenceofSum(n,m):
    l1=[]
    l2=[] 
    for i in range(1,m+1):
        if(i%n==0):
            l1.append(i)
        else:
            l2.append(i)
    return abs(sum(l1)-sum(l2))  
n=int(input("n:")) 
m=int(input("m:"))
print(differenceofSum(n,m))


29.def LargeSmallSum(arr)
The function accepts an integers arr of size ’length’ as its arguments you are required to return the sum of second largest  element from the even positions and second smallest from the odd position of given ‘arr’
Assumption:
All array elements are unique
Treat the 0th position as even
NOTE
Return 0 if array is empty
Return 0, if array length is 3 or less than 3
Example
Input
arr:3 2 1 7 5 4
Output
7
def LargeSmallSum(arr):
    if(len(arr)==0 or len(arr)<=3):
        return 0
    l1=[]
    l2=[]
    for i in range(len(arr)):
        if(i%2==0):
            l1.append(arr[i])
            l1.sort()
            l1.reverse()
        if(i%2!=0):
            l2.append(arr[i])
            l2.sort()
    return l1[1]+l2[1]
arr=list(map(int,input().split()))  
print(LargeSmallSum(arr))
 
 

30.def ProductSmallestPair(sum, arr)
The function accepts an integers sum and an integer array arr of size n. Implement the function to find the pair, (arr[j], arr[k]) where j!=k, Such that arr[j] and arr[k] are the least two elements of array (arr[j] + arr[k] <= sum) and return the product of element of this pair
NOTE
Return -1 if array is empty or if n<2
Return 0, if no such pairs found
All computed values lie within integer range
Example
Input
sum:9
size of Arr = 7
Arr:5 2 4 3 9 7 1
Output
2 
def ProductSmallestPair(sum, arr):
    if(n==0 or n<2):
        return -1
    for i in range(n):
        arr.sort()
        arr1=arr[0]+arr[1]
        if(arr1<=sum):
            return arr[0]*arr[1]
        else:
            return 0
sum=int(input("sum:"))
n=int(input("n:"))
arr=list(map(int,input("array:").split()))        
print(ProductSmallestPair(sum, arr))            


31.N-base notation is a system for writing numbers that uses only n different symbols, This symbols are the first n symbols from the given notation list(Including the symbol for o) Decimal to n base notation are (0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:A,11:B and so on upto 35:Z)
Implement the following function
Char* DectoNBase(int n, int num):
The function accept positive integer n and num Implement the function to calculate the n-base equivalent of num and return the same as a string
Steps:
Divide the decimal number by n,Treat the division as the integer division
Write the the remainder (in  n-base notation)
Divide the quotient again by n, Treat the division as integer division
Repeat step 2 and 3 until the quotient is 0
The n-base value is the sequence of the remainders from last to first
Assumption:
1 < n < = 36
Example
Input
n: 12
num: 718
Output
4BA
Explanation
num       Divisor       quotient       remainder
718           12               59                 10(A)
59             12                4                   11(B)
4               12                0                   4(4)

n=int(input("n:"))    
num=int(input("num:")) 
remainder =[]
q=num//n 
r=num%n
remainder.append(r)
while(q!=0):
    remainder.append(q%n)
    q=q//n
remainder=remainder[::-1]
e=''
for i in remainder:
    if(i>9):
        a=i-9
        a=64+a 
        e+=chr(a)
    else:
        e+=str(i)
print(e)
        

32.char*MoveHyphen(char str[],int n);
The function accepts a string “str” of length ‘n’, that contains alphabets and hyphens (-). Implement the function to move all hyphens(-) in the string to the front of the given string.
NOTE:- Return null if str is null.
Example :
Input:
str:Move-Hyphens-to-Front
Output:
—MoveHyphenstoFront 
def MoveHyphen(string,n):
    if(n==0):
        return "null"
    str1=''
    str2=''
    for i in string:
        if i=='-':
            str1+=i
        else:
            str2+=i
    return str1+str2        
str1=input()
n=len(str1)
print(MoveHyphen(str1,n))


33.The functions accepts two numbers ‘num1’ and ‘num2’ as its arguments. You are required to calculate and return  the total number of carries generated while adding digits of two numbers ‘num1’ and ‘ num2’.
Assumption: num1, num2>=0
Example:
Input
Num 1: 451
Num 2: 349
Output
2
Explanation:
Adding ‘num 1’ and ‘num 2’ right-to-left results in 2 carries since ( 1+9) is 10. 1 is carried and (5+4=1) is 10, again 1 is carried. Hence 2 is returned.
def NumberOfCarries(num1,num2):
    carry=0
    carry_count=0
    while(num1>0 and num2>0):
        digit1=num1%10 #for getting the last digit of the number
        digit2=num2%10
        total=digit1+digit2+carry
        if(total>=10):
            carry=1
            carry_count+=1 
        else:
            carry=0 
        num1=num1//10
        num2=num2//10
    return carry_count 
num1=int(input("num1:"))
num2=int(input("num2:"))
print(NumberOfCarries(num1,num2)) 
      
        
34.The function accepts a string  ‘ str’ of length n and two characters ‘ch1’ and ‘ch2’ as its arguments . Implement the function to modify and return the string ‘ str’ in such a way that all occurrences of ‘ch1’ in original string are replaced by ‘ch2’ and all occurrences of ‘ch2’  in original string are replaced by ‘ch1’.
Assumption: String Contains only lower-case alphabetical letters.
Note:
Return null if string is null.
If both characters are not present in string or both of them are same , then return the string unchanged.
Example:
Input:
Str: apples
ch1:a
ch2:p
Output:
paales
def replacechar(str1,ch1,ch2):
    if str1 is None:
        return "None"
    if ch1==ch2:
        return str1 
    if ch1 not in str1 and ch2 not in str1 :
        return str1
    temp="\0"
    str1=str1.replace(ch1,temp)
    str1=str1.replace(ch2,ch1)
    str1=str1.replace(temp,ch2)
    return str1
str1=input("string:")
ch1=input("ch1:")
ch2=input("ch2:")
print(replacechar(str1,ch1,ch2))


35.Int OperationChoices(int c, int n, int a , int b )
The function accepts 3 positive integers ‘a’ , ‘b’ and ‘c ‘ as its arguments. Implement the function to return.
( a+ b ) , if c=1
( a – b ) , if c=2
( a * b ) ,  if c=3
(a / b) ,  if c =4
Assumption : All operations will result in integer output.

def operation(a,b,c):
    if(c==1):
        return a+b
    if(c==2):
        return a-b 
    if(c==3):
        return a*b 
    if(c==4):
        return a//b
c=int(input("c:"))
a=int(input("a:")) 
b=int(input("b:"))
print(operation(a,b,c))


36.find the total number of occurrences of the substring in the original string.
def count_sub_string(string,sub_string):
    count=0
    for i in range(0,len(string)):
        if(string[i:i+len(sub_string)]==sub_string):
            count+=1 
    return count 
string=input("enter string:")    
sub_string=input("enter sub_string:")
print(count_sub_string(string,sub_string))
output :
enter string:abcdccdc
enter sub_string:cdc
2

37.any method
numbers = [0, 1, 0, 0]
result = any(numbers)
print(result)
output :
True 


38.all method 
numbers = [1, 1, 3, 4]
result = any(numbers)
print(result)
output :
True 


39.s = input()    
if(any(char.isalnum() for char in s)):
    print("True")   
else:
    print("False")                        
if(any(char.isalpha() for char in s)):
    print("True") 
else:
    print("False")                 
if(any(char.isdigit() for char in s)):
    print("True")  
else:
    print("False")                       
if(any(char.islower() for char in s)):
    print("True") 
else:
    print("False")                                  
if(any(char.isupper() for char in s)):
    print("True") 
else:
    print("False")   
output :
qA2  # because it contains a digit,alhabet,both ,lowercase letter and uppercase letter
True
True
True
True
True


40.import textwrap
s="This is a very very long string."
print(textwrap.wrap(s,4))
print(textwrap.fill(s,4))
output :
['This', 'is a', 'very', 'very','long', 'stri', 'ng.']
This
is a
very
very
long
stri
ng.

41.To print the second largest element in a list
l=[2,3,5,6,6]  
l1=[]
for i in l:
    if(i<max(l)):
        l1.append(i)
print(max(l1))
output :
5    
    
       
        
42given an array A of size N where A[i] represents minutes count the number of pairs 
whose sum represents any full hour as the count can be very large,print count modulo(%) 10^9+7 
if no such pair can be formed then print "no hours"

N=int(input())
a = array.array('i',[])
for i in range(N):
    x=int(input())
    a.append(x)
count=0    
for i in range(N):
    for j in range(i):
        sum1=a[i]+a[j]
        if(sum1==60):
            count+=1 
            count%((10**9)+7)
if(count==0):
    print("NO HOURS")
else:
    print(count)
        
    
 

Sample Input 0
3 # size of the dictionary
Krishna 67 68 69
Arjun 70 98 63
Malika 52 56 60
Malika
Sample Output 0
56.00
n=int(input())
s = {}
for i in range(n):
    name = input() #keys
    scores = list(map(float,input().split())) #values
    s[name]=scores #insert into dictionary in the form of key:value
q=input() #value name of wanted avg value 
if(q in s): # checking if the entered name is present in the dictionary or not
    st=s[q] #prints the value entered name
    avg = sum(st)/len(st)
print(f"{avg:.2f}") #it prints two places(numbers) after decimal    
            (or)
n = int(input())
student_marks = {}
for _ in range(n):
    line = input().split()
    name = line[0] 
    scores = list(map(float,line[1:]))
    student_marks[name] = scores
query_name = input()
if(query_name in student_marks ):
    st=student_marks[query_name]
    avg = sum(st)/len(st)
print(f"{avg:.2f}")  



The task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].
If a[i] > b[i], then Alice is awarded 1 point.
If a[i] < b[i], then Bob is awarded 1 point.
If a[i] = b[i], then neither person receives a point.
Comparison points is the total points a person earned.
Sample Input 
5 6 7
3 6 10
Sample Output 
1 1
def compareTriplets(a, b):
    a1=0
    b1=0
    for i in range(len(a)):
        if(a[i]>b[i]):
            a1+=1 
        elif(a[i]<b[i]):
            b1+=1 
        elif(a[i]==b[i]):
            pass 
    return f"{a1}{b1}"         
a=list(map(int,input().split()))  
b=list(map(int,input().split()))  
print(compareTriplets(a, b))


consider a string of binary numbers if the no of 1's represents alphabetical 
charcters i.e if no.of is 2 then prints B if 3 print c like that and the 0's 
can be acts as a separators
s='110111001'
count=0
string=''
for i in s:
    if(i=='1'):
        count+=1
    elif(i=='0'):
        if(count>0):
            string+=(chr(ord('A')+count-1)) 
        count=0    
if(count>0):
    string+=(chr(ord('A')+count-1)) 
print(string)        
output:
BCA

  


a google prime number is defined as a number whose sum of individual digits results in a prime number. 
your task is to determine if a given number is google prime or not if it is print "yes" otherwise "no" 
n=int(input())
sum1=0
while(n>0):
    temp=n%10
    sum1=sum1+temp
    n=n//10
if sum1>1:
    for i in range(2,sum1):
        if(sum1%i==0):
            print("No")
            break
    else:
        print("Yes")
else:
    print("No")    
   

a ship needs a transport people from point a to point b.
if a ship has capacity of c and there are n people.
your task is to return the no.of rounds it has to make to ship all the people
c=int(input())
n=int(input())
if(n>0):
    if(c==n or n%c==0):
        r1=n//c
        print(r1)
    elif(n%c!=0):
        r2=n//c+1
        print(r2)
output:
30 75       30 30               
3           1       




daniel has a ball,he wants to find the ball's rebound height which he dropped from 
height 'h' with an initial velocity 'v' after the nth rebound the final velocity of 
the ball is vn your task is to help him find and return an integer value representing
the height to which the ball rebounds after n bounces
note:h'=h*e^2n where h' is rebound height,h is initial height 
e^2n=v/vn where v is initial velocity and vn is final velocity
h=int(input("initial height:"))
v=int(input("initial velocity:"))
vn=int(input("final velocity:"))
k=v//vn
rebound_height=h*(k**2) 
print(rebound_height)
output :
initial height:10
initial velocity:20
final velocity:5
160



In a remote village,there existed two mystical strings s1 and s2 in these strings
was hidden a a secretencoded in their charcters your task is to find and return an 
integer value representing the encoded secret of the strings by finding the sum of 
the ascii values of the charcters in the longest common substring between these two 
strings return 0 if there is no substring
s1=input()
s2=input()
long_string=''
max_length=0 
for i in range(len(s2)):
    for j in range(i+1,len(s2)+1):
        substring=s2[i:j]
        if(substring in s1 and len(substring)>max_length):
            max_length=len(substring)
            long_string=substring 
if(long_string):
    sum1=0
    for i in long_string:
        k=ord(i)
        sum1=sum1+k 
    print(sum1)    
else:
    print("0")
        
output:
adventure
future
448 #substrings are ture,ure,re,e among these longest is ture and the sum of ascii numbers of ture is 448



given two strings s1 and s2 your task is to find the leftover string s1 
after removing all the letters that are present in string s2
s1=input()
s2=input()
s3=''
for i in s1:
    if(i not in s2):
        s3+=i
print(s3)            
output:
aabbcc
ab
cc
      


charles is given an array A,he wants to find the count of occurances of second largest elementin the array 
your task is to help him and return an integer value representing the count of occurance of the second largest element in the arrray
import array
n=int(input())
A=array.array('i',[])
for i in range(n):
    x=int(input())
    A.append(x)
arr=array.array('i',[])
for i in A:
    m=max(A)
    if(i<m):
        arr.append(i)
count=0        
for i in arr:
    l=max(arr)
    if(i==l):
        count+=1 
print(count)      
output:
8
1 2 3 4 4 5 5 5
2



alex gives you a positive number n and wants you to rearrange the bits of the number in its binary 
representation such that all set bits are in consecutive order your task is to find  and return an
integer value representing the minimum possible number that can be formed after re-arranging the bits of the number n
n=int(input())
n=bin(n)
count=n.count('1')
min_num=(1<<count)-1
print(min_num)
output:
10 #1010 we can form it in 1100,0110,0011 so minimum is 0011(3)
3

given array a,divisor,quotient,remainder as input and calculate the dividend and 
check whether the dividend is present in the array or not ,if present return index else -1
import array
def div():
    a=array.array('i',map(int,input().split(",")))
    for i in range(n):
        if(a[i]==dividend):
            return i 
        else:
            return -1
n=int(input("enter size:"))
q=int(input("enter quotient:"))    
d=int(input("enter devisor:"))
r=int(input("enter remainder:"))
dividend=q*d+r    
print(div())




Consider a list (list = []). You can perform the following commands:

insert i e: Insert integer e at position i.
print: Print the list.
remove e: Delete the first occurrence of integer e.
append e: Insert integer e at the end of the list.
sort: Sort the list.
pop: Pop the last element from the list.
reverse: Reverse the list.
Initialize your list and read in the value of n followed by n3 lines of commands where each command will be of the  types listed above. Iterate through each command in order and perform the corresponding operation on your list.
if __name__ == '__main__':
    N = int(input())
   
    l1=[]    
for i in range(N):
    c=input().split()
    if(c[0]=="insert"):
        l1.insert(int(c[1]),int(c[2]))
    elif(c[0]=="print"):
        print(l1)
    elif(c[0]=="remove"):
        l1.remove(int(c[1]))
    elif(c[0]=="append"):
        l1.append(int(c[1]))
    elif(c[0]=="sort"):
        l1.sort()
    elif(c[0]=="print"):
        print(l1)
    elif(c[0]=="pop"):
        l1.pop()
    elif(c[0]=="reverse"):
        l1.reverse()
    elif(c[0]=="print"):
        print(l1)                                 
 
 
 
 
 
 s = input()
result = " "
for i in s:
    if(i.isalpha()):
        continue
    else:
        result+=i
print(result)
 
ouput:
sarva04
 04



s = input()
r1=0
r2=0
vowels="aeiouAEIOU"
for i in s:
    if(i in vowels):
        r1+=1
    else:
        r2+=1 
print(f"no.of vowels:{r1}")
print(f"no.of consonents:{r2}")

output :
tejaaA
no.of vowels:4
no.of consonents:2



s = input()
v=0
c=0
d=0
vowels="aeiouAEIOU"
for i in s:
    if(i in vowels):
        v+=1
    elif(i.isdigit()):
        d+=1
    else:
        c+=1    
print(f"no.of vowels:{v}")
print(f"no.of consonents:{c}")
print(f"numbers:{d}")

output:
teja123
no.of vowels:2
no.of consonents:2
numbers:3

     
s=input()
small=0
capital=0
for i in s:
    if(65<=ord(i)<=90):
        capital+=1 
    else:
        small+=1    
print(small)
print(capital)

output:
TejA
2
2
    
    
s=input()
sp,u,l,d=0,0,0,0
for i in s:
    if(i.isupper()):
        u+=1 
    elif(i.islower()):
        l+=1 
    elif(i.isdigit()):
        d+=1 
    else:
        sp+=1 
if(len(s)>8 and u>0 and l>0 and d>0 and sp>0):
    print("strong password")
elif(len(s)==0):
    print("please enter a password")
else:
    print("weak password")    
    
ouput:
jha
weak password

    
s=input()
u,l=0,0
for i in s:
    if(i.isupper()):
        u+=1
    elif(i.islower()):
        l+=1 
if(u>l):
    print(s.upper())
else:
    print(s.lower())

output:
jhanSI
jhansi


s=input()
s=s.split()
s=s[::-1] 
print(*s) # or  print(" ".join(s))
output:
hello hey world
world hey hello


s=input() #2395678         
ind=-1 
for i in range(len(s)-1,-1,-1): # i=6 i=5 
    if(int(s[i])%2==1): # s[6]=8 s[5]=7 
        ind=i # 7 
        break 
result=" "
for i in range(0,ind+1): #(0,5+1)
    result+=s[i] #s[0]=2,s[1]=3,s[2]=9 ....s[5]=7
print(result) #239567
output:
2395678
 239567

to print second largest number
l1=[1,2,3,4,4,5,5,0,-9]
l2=set(l1)
l2=sorted(l2)
print(l2[-2])
output:
4



printing the count of individual digits and digits in a number
n=int(input())
c=0
while(n):
    x=n%10 
    print(x,end=" ")
    n=n//10 
    c+=1
print()    
print(c) 
output:
1234
4 3 2 1 
4


printing second largest number with out using any inbuilt functions
l1=list(map(int,input().split()))
Max=l1[0]
for i in l1:
    if(i>Max):
        Max=i
smax=float("-inf")
for i in l1:
    if(i>smax and i!=Max):
        smax=i
if(smax==float("-inf")):
    print(-1)
else:
    print(smax) 
output :
1 3 4 5 -9 -4 18 9 0 4 4 10
10



printing a missing number in given range of elements orderly     
n=int(input())
l=list(map(int,input().split()))
s1=(n*(n+1))//2 
s2=sum(l)
print(s1-s2)
output:
7
1 3 4 5 6 7
2



l1=list(map(int,input().split()))
target=int(input())
l2=[]
for i in range(0,len(l1)):
    for j in range(i+1,len(l1)):
        if(l1[i]+l1[j]==target):
            l2.extend([i,j])
print(l2)        
output :
4 5 7 8 9
17
[3, 4]

    (or)    
it is only work for sorted lists only
def twosums(nums,target):
    low=0
    high=len(nums)-1
    while(low<high):
        Sum=nums[low]+nums[high]
        if(Sum==target):
            return True
        elif(Sum>target):
            high-=1
        elif(Sum<target):
            low+=1 
    return False        
nums=list(map(int,input().split()))
target=int(input())
print(twosums(nums,target))        
output:
1 3 2 5 4 6 7 6 100 102
11
True
         (or)
def twosums(nums,target):
    d={}
    for a in range(0,len(nums)-1):
        b=target-nums[a]
        if(b in d):
            return [d[b],a]
        else:
            d[nums[a]]=a
nums=list(map(int,input().split()))
target=int(input())
print(twosums(nums,target))        
output :
9 -1 8 2 0 -5
10
[2, 3]
  


print the numbers which are more than n//3 times
li=list(map(int,input().split()))
n=len(li)
d={}
for i in li:
    if(i in d):
        d[i]+=1  
    else:
        d[i]=1 
result=[]
for key,value in d.items():
    if(value>n//3):
        result.append(key)
print(result)        
output:
1 2 2 3 3 3 3 4 3
[3]
      
          